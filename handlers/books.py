from aiogram import Router, F
from aiogram.types import Message

from middleware.chat_action import ChatActionMiddleware
from utils.ai import generate_recommendation
from aiogram.utils.formatting import Text, Bold, as_list, as_marked_list

router = Router()
router.message.middleware(ChatActionMiddleware())

@router.message(F.text, flags={'long_operation': 'typing'})
async def get_book_recommendations(message: Message):
    prompt = message.text
    answer = await message.answer("–ü–æ–¥–±–∏—Ä–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
    res = await generate_recommendation(prompt)
    books_list = []
    for book in res:
        books_list.append(Text(Bold(book['title']), ' - ', f'{book['author']}. ', book['description'] ))
    content = as_list(f'–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å {prompt}, –≤–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –±—É–¥—É—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–Ω–∏–≥–∏:', as_marked_list(*books_list, marker='üìö'), "–ù–∞–¥–µ—é—Å—å, —ç—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–Ω—Ä–∞–≤—è—Ç—Å—è!", sep="\n\n")
    if res:
        return await answer.edit_text(**content.as_kwargs())
    else: 
        return await answer.edit_text("Error")
